generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
enum PlanStatus {
  NOT_STARTED
  STARTED
  IN_PROGRESS
  NOT_DONE
}

enum Frequency {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum ActivityCategory {
  WORK
  STUDY
  EXERCISE
  MEAL
  REST
  LEISURE
  MEETING
  COMMUTE
  SOCIAL
  SELF_CARE
  CHORES
  OTHER
}

enum Mood {
  VERY_PRODUCTIVE
  PRODUCTIVE
  NEUTRAL
  UNPRODUCTIVE
  VERY_UNPRODUCTIVE
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  FRIEND_REQUEST_RECEIVED
  FRIEND_REQUEST_ACCEPTED
  DAILY_SUMMARY
  GOAL_COMPLETED
  SUBGOAL_COMPLETED
  STREAK_MILESTONE
  ACCOUNTABILITY_REPORT_RECEIVED
  ACCOUNTABILITY_REMINDER
}

model user {
  id                Int       @id @default(autoincrement())
  created_time      DateTime  @default(now())
  email             String    @unique
  first_name        String?
  last_name         String?
  gender            String?
  profile_image_url String?
  user_id           String    @unique
  subscription      String?
  goals             goal[]
  subgoals         subgoal[]
  days             day[]
  activities       activity[]
  tags             tag[]
  accountability_settings AccountabilitySettings[]
  notifications     Notification[]
  
  // New relations for accountability feature
  sent_friend_requests     FriendRequest[] @relation("SentFriendRequests")
  received_friend_requests FriendRequest[] @relation("ReceivedFriendRequests")
  
  friendships_as_user1    Friendship[]    @relation("FriendshipUser1")
  friendships_as_user2    Friendship[]    @relation("FriendshipUser2")

  sent_reports           AccountabilityReport[] @relation("SentReports")
  received_reports       AccountabilityReport[] @relation("ReceivedReports")
}

model payments {
  id               Int      @id @default(autoincrement())
  created_time     DateTime @default(now())
  stripe_id        String
  email            String
  amount           String
  payment_time     String
  payment_date     String
  currency         String
  user_id          String
  customer_details String
  payment_intent   String
}

model subscriptions {
  id                        Int      @id @default(autoincrement())
  created_time              DateTime @default(now())
  subscription_id           String
  stripe_user_id            String
  status                    String
  start_date                String
  end_date                  String?
  plan_id                   String
  default_payment_method_id String?
  email                     String
  user_id                   String
}

model subscriptions_plans {
  id           Int      @id @default(autoincrement())
  created_time DateTime @default(now())
  plan_id      String
  name         String
  description  String
  amount       String
  currency     String
  interval     String
}

model invoices {
  id              Int      @id @default(autoincrement())
  created_time    DateTime @default(now())
  invoice_id      String
  subscription_id String
  amount_paid     String
  amount_due      String?
  currency        String
  status          String
  email           String
  user_id         String?
}

model goal {
  id          String    @id 
  title       String
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  priority    Priority  @default(MEDIUM)
  active      Boolean   @default(true)
  start_date  DateTime
  end_date    DateTime
  completed   Boolean   @default(false)
  user        user      @relation(fields: [user_id], references: [id])
  user_id     Int
  subgoals    subgoal[]
  notifications     Notification[]
}

model subgoal {
  id          String    @id 
  title       String
  description String?
  frequency   Frequency
  active      Boolean   @default(true)
  due_date    DateTime
  completed   Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  goal        goal      @relation(fields: [goal_id], references: [id])
  goal_id     String
  user        user      @relation(fields: [user_id], references: [id])
  user_id     Int
  notifications     Notification[]
}

model tag {
  id          String     @id
  name        String
  color       String?    // Hex color code
  created_at  DateTime   @default(now())
  user        user       @relation(fields: [user_id], references: [id])
  user_id     Int
  activities  activity[]

  @@unique([name, user_id])
}

model activity {
  id          String           @id
  title       String
  description String?
  category    ActivityCategory @default(OTHER)
  duration    Int             
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  user        user             @relation(fields: [user_id], references: [id])
  user_id     Int
  tags        tag[]
  entries     entry[]
}

model day {
  id              String    @id
  date            DateTime  @unique
  mood            Mood?     
  summary         String?   
  energy_level    Int?      
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  user            user      @relation(fields: [user_id], references: [id])
  user_id         Int
  plans           Plan[]
  entries         entry[]
  plan_feedback   PlanFeedback[]
  total_focus_time Int?     
  distractions    String[]  
  highlights      String[]  
  notifications     Notification[]
}

model entry {
  id             String           @id
  start_time     DateTime
  end_time       DateTime
  title          String
  description    String?
  category       ActivityCategory @default(OTHER)
  focus_score    Int?            
  energy_level   Int?            
  interruptions  Int?            
  location       String?         
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  day            day             @relation(fields: [day_id], references: [id])
  day_id         String
  activity       activity?       @relation(fields: [activity_id], references: [id])
  activity_id    String?
}

model Plan {
  id            String      @id @default(uuid())
  task          String
  description   String?
  from_time     String
  to_time       String
  status        PlanStatus  @default(NOT_STARTED)
  effectiveness Int         @default(5)
  distractions  Int         @default(5)
  note          String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  day           day         @relation(fields: [day_id], references: [id])
  day_id        String
}
model PlanFeedback {
  id                String    @id @default(uuid())
  created_at        DateTime  @default(now())
  day               day       @relation(fields: [day_id], references: [id]) 
  day_id            String
  @@index([day_id])
  overall_summary   String    // Overall day analysis
  achievements      String[]  // What went well
  improvement_areas String[]  // Areas needing improvement
  recommendations   String[]  // Actionable recommendations
  productivity_score Int      // AI-calculated productivity score (1-100)
  goal_alignment    String?   // How well daily activities aligned with goals
  time_management   String?   // Time management analysis
  pattern_insights  String?   // Identified patterns and trends
}
model FriendRequest {
  id            String      @id @default(uuid())
  created_at    DateTime @default(now())
  status        FriendshipStatus   @default(PENDING) // PENDING, ACCEPTED, REJECTED
  
  sender_id     Int
  receiver_id   Int
  
  sender        user     @relation("SentFriendRequests", fields: [sender_id], references: [id])
  receiver      user     @relation("ReceivedFriendRequests", fields: [receiver_id], references: [id])

  @@unique([sender_id, receiver_id])
} 

model Friendship {
  id            String      @id @default(uuid())
  created_at    DateTime @default(now())
  
  user1_id      Int
  user2_id      Int
  
  user1         user     @relation("FriendshipUser1", fields: [user1_id], references: [id])
  user2         user     @relation("FriendshipUser2", fields: [user2_id], references: [id])
  
  accountability_settings AccountabilitySettings[]
  notifications     Notification[]

  @@unique([user1_id, user2_id])
}

model AccountabilitySettings {
  id            String      @id @default(uuid())
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  friendship_id String
  friendship    Friendship @relation(fields: [friendship_id], references: [id])
  
  user_id       Int
  user          user     @relation(fields: [user_id], references: [id])
  
  share_enabled Boolean   @default(false)
  frequency     String    @default("DAILY") // DAILY, WEEKLY
  reminder_time DateTime? // Time of day for reminders

  @@unique([friendship_id, user_id])
}

model AccountabilityReport {
  id            String      @id @default(uuid())
  created_at    DateTime @default(now())
  report_date   DateTime
  
  sender_id     Int
  receiver_id   Int
  
  sender        user     @relation("SentReports", fields: [sender_id], references: [id])
  receiver      user     @relation("ReceivedReports", fields: [receiver_id], references: [id])
  
  activities_completed Int
  goals_progressed    Int
  main_achievements   String
  challenges          String?
  plans_for_tomorrow  String?
  
  notifications     Notification[]
  
  @@unique([sender_id, receiver_id, report_date])
}

model Notification {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  type            NotificationType
  title           String
  content         String
  isRead          Boolean          @default(false)
  
  // Recipient user
  userId          Int
  user            user             @relation(fields: [userId], references: [id])
  
  // Optional relations based on notification type
  goalId          String?          // For goal/subgoal related notifications
  goal            goal?            @relation(fields: [goalId], references: [id])
  
  subgoalId       String?          // For subgoal related notifications
  subgoal         subgoal?         @relation(fields: [subgoalId], references: [id])
  
  dayId           String?          // For daily summary notifications
  day             day?             @relation(fields: [dayId], references: [id])
  
  friendshipId    String?             // For friendship related notifications
  friendship      Friendship?      @relation(fields: [friendshipId], references: [id])
  
  reportId        String?          // For accountability report notifications
  report          AccountabilityReport? @relation(fields: [reportId], references: [id])

  @@index([userId])
  @@index([createdAt])
}