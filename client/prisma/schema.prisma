generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Frequency {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum ActivityCategory {
  WORK
  STUDY
  EXERCISE
  MEAL
  REST
  LEISURE
  MEETING
  COMMUTE
  SOCIAL
  SELF_CARE
  CHORES
  OTHER
}

enum Mood {
  VERY_PRODUCTIVE
  PRODUCTIVE
  NEUTRAL
  UNPRODUCTIVE
  VERY_UNPRODUCTIVE
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

//TODO: later
// enum NotificationType {
//   FRIEND_REQUEST
//   DAILY_SUMMARY
//   GOAL_COMPLETED
//   STREAK_MILESTONE
// }

// model notification {
//   id          String
//   type        NotificationType
//   title       String
//   content     String
//   read        Boolean
//   user        user
//   related_day_id    String?    // For daily summaries
//   related_goal_id   String?    // For goal completions
//   related_friendship_id String? // For friend requests
// }

model user {
  id                Int       @id @default(autoincrement())
  created_time      DateTime  @default(now())
  email             String    @unique
  first_name        String?
  last_name         String?
  gender            String?
  profile_image_url String?
  user_id           String    @unique
  subscription      String?
  goals             goal[]
  subgoals         subgoal[]
  days             day[]
  activities       activity[]
  tags             tag[]

  // New relations for accountability feature
  sent_friend_requests     FriendRequest[] @relation("SentFriendRequests")
  received_friend_requests FriendRequest[] @relation("ReceivedFriendRequests")
  
  friendships_as_user1    Friendship[]    @relation("FriendshipUser1")
  friendships_as_user2    Friendship[]    @relation("FriendshipUser2")

  sent_reports           AccountabilityReport[] @relation("SentReports")
  received_reports       AccountabilityReport[] @relation("ReceivedReports")
}

model payments {
  id               Int      @id @default(autoincrement())
  created_time     DateTime @default(now())
  stripe_id        String
  email            String
  amount           String
  payment_time     String
  payment_date     String
  currency         String
  user_id          String
  customer_details String
  payment_intent   String
}

model subscriptions {
  id                        Int      @id @default(autoincrement())
  created_time              DateTime @default(now())
  subscription_id           String
  stripe_user_id            String
  status                    String
  start_date                String
  end_date                  String?
  plan_id                   String
  default_payment_method_id String?
  email                     String
  user_id                   String
}

model subscriptions_plans {
  id           Int      @id @default(autoincrement())
  created_time DateTime @default(now())
  plan_id      String
  name         String
  description  String
  amount       String
  currency     String
  interval     String
}

model invoices {
  id              Int      @id @default(autoincrement())
  created_time    DateTime @default(now())
  invoice_id      String
  subscription_id String
  amount_paid     String
  amount_due      String?
  currency        String
  status          String
  email           String
  user_id         String?
}

model goal {
  id          String    @id 
  title       String
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  priority    Priority  @default(MEDIUM)
  active      Boolean   @default(true)
  start_date  DateTime
  end_date    DateTime
  completed   Boolean   @default(false)
  user        user      @relation(fields: [user_id], references: [id])
  user_id     Int
  subgoals    subgoal[]
}

model subgoal {
  id          String    @id 
  title       String
  description String?
  frequency   Frequency
  active      Boolean   @default(true)
  due_date    DateTime
  completed   Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  goal        goal      @relation(fields: [goal_id], references: [id])
  goal_id     String
  user        user      @relation(fields: [user_id], references: [id])
  user_id     Int
}

model tag {
  id          String     @id
  name        String
  color       String?    // Hex color code
  created_at  DateTime   @default(now())
  user        user       @relation(fields: [user_id], references: [id])
  user_id     Int
  activities  activity[]

  @@unique([name, user_id])
}

model activity {
  id          String           @id
  title       String
  description String?
  category    ActivityCategory @default(OTHER)
  duration    Int             
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  user        user             @relation(fields: [user_id], references: [id])
  user_id     Int
  tags        tag[]
  entries     entry[]
}

model day {
  id              String    @id
  date            DateTime  @unique
  mood            Mood?     
  summary         String?   
  energy_level    Int?      
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  user            user      @relation(fields: [user_id], references: [id])
  user_id         Int
  entries         entry[]
  total_focus_time Int?     
  distractions    String[]  
  highlights      String[]  
}

model entry {
  id             String           @id
  start_time     DateTime
  end_time       DateTime
  title          String
  description    String?
  category       ActivityCategory @default(OTHER)
  focus_score    Int?            
  energy_level   Int?            
  interruptions  Int?            
  location       String?         
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  day            day             @relation(fields: [day_id], references: [id])
  day_id         String
  activity       activity?       @relation(fields: [activity_id], references: [id])
  activity_id    String?
}

model FriendRequest {
  id            String      @id @default(uuid())
  created_at    DateTime @default(now())
  status        String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  
  sender_id     Int
  receiver_id   Int
  
  sender        user     @relation("SentFriendRequests", fields: [sender_id], references: [id])
  receiver      user     @relation("ReceivedFriendRequests", fields: [receiver_id], references: [id])

  @@unique([sender_id, receiver_id])
} 

model Friendship {
  id            String      @id @default(uuid())
  created_at    DateTime @default(now())
  
  user1_id      Int
  user2_id      Int
  
  user1         user     @relation("FriendshipUser1", fields: [user1_id], references: [id])
  user2         user     @relation("FriendshipUser2", fields: [user2_id], references: [id])
  
  accountability_settings AccountabilitySettings?

  @@unique([user1_id, user2_id])
}
model AccountabilitySettings {
  id            String      @id @default(uuid())
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  friendship_id String       @unique
  friendship    Friendship @relation(fields: [friendship_id], references: [id])
  
  share_enabled Boolean   @default(false)
  frequency     String    @default("DAILY") // DAILY, WEEKLY
  reminder_time DateTime? // Time of day for reminders
}



model AccountabilityReport {
  id            String      @id @default(uuid())
  created_at    DateTime @default(now())
  report_date   DateTime
  
  sender_id     Int
  receiver_id   Int
  
  sender        user     @relation("SentReports", fields: [sender_id], references: [id])
  receiver      user     @relation("ReceivedReports", fields: [receiver_id], references: [id])
  
  activities_completed Int
  goals_progressed    Int
  main_achievements   String
  challenges          String?
  plans_for_tomorrow  String?
  
  @@unique([sender_id, receiver_id, report_date])
}